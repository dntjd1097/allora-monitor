name: Deploy to Production

on:
    push:
        branches:
            - main

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    deploy:
        runs-on: self-hosted
        steps:
            - name: Clean workspace before checkout
              run: |
                  # 강제로 모든 파일 및 디렉토리 삭제
                  if [ -d "$GITHUB_WORKSPACE" ]; then
                    sudo find $GITHUB_WORKSPACE -type d -name "renewal-hooks" -exec chmod -R 777 {} \; || true
                    sudo find $GITHUB_WORKSPACE -type d -name "certbot" -exec chmod -R 777 {} \; || true
                    sudo rm -rf $GITHUB_WORKSPACE/* || true
                    sudo rm -rf $GITHUB_WORKSPACE/.* || true
                  fi

            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Docker network
              run: |
                  if ! sudo docker network ls | grep -q "allora-web-network"; then
                    echo "Docker 네트워크 생성 중..."
                    sudo docker network create allora-web-network || true
                  else
                    echo "Docker 네트워크가 이미 존재합니다."
                  fi

                  sudo usermod -aG docker $USER || true

            - name: Setting up directories
              run: |
                  sudo mkdir -p $(pwd)/backend/data
                  sudo chmod 777 $(pwd)/backend/data

            - name: Create and configure Docker volume
              run: |
                  sudo docker volume create allora_monitor_data || true
                  sudo docker run --rm -v allora_monitor_data:/data alpine sh -c "chmod -R 777 /data"

            - name: Stop existing containers
              run: |
                  echo "기존 컨테이너 중지 중..."
                  sudo docker compose down || true

            - name: Build and start containers
              run: |
                  echo "Docker Compose 빌드 및 실행 중..."
                  sudo docker compose build
                  sudo docker compose up -d

            - name: Check running containers
              run: |
                  echo "실행 중인 컨테이너 확인:"
                  sudo docker compose ps

            - name: Show logs
              run: |
                  echo "프론트엔드 로그:"
                  sudo docker compose logs frontend --tail 20 || true

                  echo "백엔드 로그:"
                  sudo docker compose logs backend --tail 20 || true

            - name: Verify services
              run: |
                  echo "백엔드 서비스 상태 확인:"
                  curl -s http://localhost:5001 || echo "백엔드 접속 실패"

                  echo "프론트엔드 서비스 상태 확인:"
                  curl -s -I http://localhost:5000 || echo "프론트엔드 접속 실패"
